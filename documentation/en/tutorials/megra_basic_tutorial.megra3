;; ======== ;;
;; Tutorial ;;
;; ======== ;;

;; Welcome to the Mégra tutorial! Given that you made it here, I assume you have everything
;; up and running. So let's start !

;; This tutorial aims to provide an overview over the things you can do with Mégra, without
;; going too much into depth for each function. Once you are comfortable with the contents
;; of this tutorial, I recommend consulting the reference documentation.

;;;;;;;;;;;;;;;;;;;;;;
;; I - First Sounds ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Let's see if you can hear a sound. Make sure the volume is at a comfortable level.
;; Select the following expression (place the cursor somewhere between the outer parenthesis)
;; and press "Ctrl+Return" to execute it !

(once (saw 440)) ;; <-- one-shot event, here a sawtooth sound event

;; If you hear something, great! If not, back to the readme :)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; II - Synchronization and Contexts ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Now we need to put things into context. Everything in Mégra runs inside a context where
;; different sequences (or sequence generators) are synchronized. That's why it's a "Sync-conteXt",
;; or "sx" for short. A sync context needs a name and a flag that tells it whether it should be 
;; running or not. Everything that follows are sequence generators. "Synchronization" here refers to
;; to the generators being started at the same time. If they run at different speeds (more on that later),
;; they won't stay synchronized.

(sx 'context #t ;; <-- names in Mégra start with a ' ... the flag (boolean) is either #t (true) or #f (false)
  (cyc 'cycle-generator "bd ~ hats ~ sn ~ hats ~")) ;; <-- this is a sequence generator. It also needs an identifier.

(clear) ;; <-- the clear command stops everything 

;; You can put multiple sequence generators in the same context, so that they all run in sync:
;; Per defualt, new generators (that were not present in the context before) are syncronized
;; on a non-silent event.

(sx 'context #t ;; <-- set this to #f to mute this context !
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~")) 

;; You can also synchronize multiple contexts:

(sx 'context-a #t ;; <-- execute this first
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~"))

(sx 'context-b #t :sync 'context-a ;; <-- execute this when you deem fit 
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~"))

(clear)

;; There's more cool stuff you can do with the sync context alone, such as 
;; soloing and blocking:

(sx 'context #t :solo 'beat-generator ;; <-- You can solo single generators ...
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~"))

(sx 'context #t :block 'beat-generator ;; <-- ... or block them!
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~"))

(sx 'context #t :block 'sn ;; <-- You can also block or solo a special event types.
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~"))

(sx 'context #t :solo 'sn 'risset ;; <-- You can also block or solo multiple tags.
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~"))

(clear)

;; TECH BACKGROUND: 
;; You can also think of the sync context as a sink for sound events. Every sound event
;; that is emitted by the generator has a bunch of tags, which contain the name of the 
;; generator, the event type, and, in case of sample events, the search tags (more about that later). 
;; The block and solo keywords activate filters that act on these tags.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; III - Sequence Generators ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; If the sync context is a sink for events, then we need a source. That's what 
;; the sequence generators are for.
;; We've already seen one type of generator, the cycle generator. There are several more.

;; TECH BACKGROUND:
;; Every sequence generator creates a Markov chain ! That means that sequence generators
;; aren't necessarily deterministic.

;; TIP:
;; You can visualize the Markov chains, as they can easily be represented as a graph.
;; For that end, you need graphviz (https://graphviz.org/) installed! (more later as we go)

;; Let's look at some generators now. As already mentioned, each generator needs an identifier.
;; This is so that we can adrdress them for visualization, and keep their state over the 
;; various executions.


;; -----------------------;;
;; The NUCLEUS Generator. ;;
;; -----------------------;;

;; .. or 'nuc', for short ...

(sx 'ctx #t ;; <-- a continous beep
  (nuc 'core :dur 400 ;; <-- this keyword argument controls the time interval. It can be used with all sequence generators!
    (sine 440)
    ;;(sine 885) ;; <-- you can pass one or many events, uncomment to try
    ))

(clear)

;; This is the most simple generator, it just repeats the events it is given over and over at
;; a steady time interval. Each generator has a bunch of keyword arguments, as you can see 
;; above.

;;---------------------;;
;; The CYCLE Generator ;;
;;---------------------;;

;; We've already seen this above in the introduction of contexts. The cyc generator creates,
;; you've guessed it, cycles, even though there's more to it, as we will see.

;; Here's a basic cycle:
(sx 'trololo #t ;; <-- there's no need to name every context 'context' ... you don't use 'password' for all your passwords, do you ?
  (cyc 'bells "risset:'a4 ~ risset:'a6 ~ risset:'a4 ~ risset:'c5 risset:'e5"))

;; If you want the generator to be faster, you can modify the time interval:
(sx 'trololo # ;; much faster
  (cyc 'bells :dur 100 "risset:'a4 ~ risset:'a6 ~ risset:'a4 ~ risset:'c5 risset:'e5"))

(sx 'trololo # ;; way slower !
  (cyc 'bells :dur 400 "risset:'a4 ~ risset:'a6 ~ risset:'a4 ~ risset:'c5 risset:'e5")) 

;; The 'cyc' function takes a string as an argument that describes a cycle. If you already know TidalCycles,
;; the concept is borrowed from that. It is a little sequencing language of its own. 

;; So far everything has been very deterministic, so what's all the stochastic talk in the readme about ?
;; Well, take a look at this:

(sx 'trololo #t 
  (cyc 'bells :rep 70 :max-rep 4 "risset:'a4 ~ risset:'a6 ~ risset:'a4 ~ risset:'c5 risset:'e5")) 

;; Doesn't sound as predictable, does it ? So what do the keyword arguments do ? The 'rep' keyword defines
;; the chance of an event to be repeated (70% chance in this case). The 'max-rep' keyword specifies the 
;; maximum number of repetitions.  

;; For the sake of visualization, let's reduce the number of repetitions:

(sx 'trololo #t 
  (cyc 'bells :rep 70 :max-rep 2 "risset:'a4 ~ risset:'a6 ~ risset:'a4 ~ risset:'c5 risset:'e5")) 

;; Now, let's see what this markov chain looks like as a graph:

(export-dot "trololo" :live 'trololo 'bells)
  
;; You'll now find a file called "trololo_trololo_bells.dot" in the folder you started Mégra from.
;; Run 'neato -Tsvg trololo_trololo_bells.dot -o trololo_trololo_bells.svg' to render an SVG file that you
;; can run in your browser. You should see the markov chain represented as a graph, where you can see all
;; the repetitions, etc. Try different settings and see what they look like !

;; Because of its capacity to create repetetive sequences, the cyc generator is perfect for creating 
;; beats and so on. 
;; For a full description, see the entry in the function reference !

;;---------------------;;
;; The INFER Generator ;; 
;;---------------------;;

;; The cyc generator is good to create more or less repetetive sequences from abstract descriptions (the cyc language),
;; But what if you want something more controlled ? If you want to create generators from a set of rules, the 'infer' 
;; generator will take them and infer a generator from them. This is also a good opportunity to explain what the markov
;; chains (of probabilistic finite automata, PFA for short) are doing.

;; If you're into generative music, you probably know already what a Markov Chain is, as it is a fairly common structure 
;; in that domain. If not, here's a simple explanation. Even if you know them already, I'd recommend reading the following 
;; part to get to know the specific "flavour" of Markov Chains employed by Mégra.

;; Imagine you want to create a simple boom-bap style beat, with just a bassdrum, a snare and some hi-hats. Only half the 
;; time the hi-hat should be in between the bassdrum and the snare.

;; In slightly more precise terms, we could describe the beat with the following rules. The natural language description 
;; is a bit tedious, but bear with me here. More concise descriptions will follow!

;; 1.) Start with a bassdrum.
;; 2.) There's a 50% chance that a snare will follow the bassdrum, after 400 milliseconds.
;; 3.) There's a 50% chance that a hi-hat will follow the bassdrum, after 200 milliseconds.
;; 4.) After every snare will follow a bassdrum, after 400 milliseconds.
;; 5.) After every hi-hat will follow a snare, after 200 milliseconds.

(sx 'boom #t 
  (infer 'bap ;; <- this creates the generator (infers it from rules)
    :events 'b (bd) 's (sn) 'h (hats) ;; <- here's the event mapping ... pretty prosaic ...
    :rules 
    (rule 'b 's 50 400) ;; here's the rules ... format: (rule 'source 'target probability duration)
    (rule 'b 'h 50 200) 
    (rule 's 'b 100 400) 
    (rule 'h 's 100 200)))

;; Visualize it:

(export-dot "beat" :live 'boom 'bap)
;; neato -Tsvg beat_bap_boom.dot -o beat_bap_boom.svg

(clear)

;; You can also introduce repetitions:
(sx 'boom #t 
  (infer 'bap ;; <- this creates the generator (infers it from rules)
    :events 'b (bd) 's (sn) 'h (hats) ;; <- here's the event mapping ... pretty prosaic ...
    :rules 
    (rule 'b 's 50 400)
    (rule 'b 'h 50 200) 
    (rule 's 'b 100 400) 
    (rule 'h 's 10 200)
    (rule 'h 'h 90 50) ;; repeat the hihat with a 90% chance, and really quickly
    (rule 'hhhh 'b 100 200) ;; maximum repetition number: 4
    ))

;; Visualize again:
(export-dot "beat" :live 'boom 'bap)
;; neato -Tsvg beat_bap_boom.dot -o beat_bap_boom.svg

;; TECH BACKGROUND:
;; Here you can see the "variable-order" part of variable-order markov chains. You can specify the
;; required memory length when necessary, i.e. to define the length of repetitions.  

;; A bit like irregular trap, no ?

;;---------------------;;
;; The LEARN Generator ;;
;;---------------------;;

;; Markov chains cannot only be inferred from rules, but also learned from a sample. Here's where
;; a bit of old-fashioned machine learning comes in. 

;; So if instead of an exact sequence you need "something like" the sample, you can learn the pattern
;; from the sample. Durations are fixed for this method.

(sx 'boom #t 
  (learn 'bap ;; <- this creates the generator (learns from a sample)
    :events 'b (bd) 's (sn) 'h (hats) 'r (risset 'c5)
    :sample "bsbs~~~bsbsb~~hbhb~rbrb~~" ;; <-- hack in some sample string .. '~' stands for silence
    ))

(clear)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IV - Modifying the Event Stream ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Every generator emits a stream of sound events that flow towards the sink (sx). The events can be manipulated along the way,
;; either in a probabilistic or in a step-based fashion.

;;---------------------------;;
;; pear - probability-based  ;;
;;---------------------------;;

;; The 'pear' function lets you control sound event parameters in a probabilistic fashion.

(sx 'boom #t 
  (pear (lvl 0.4) (rev 0.2) ;; <-- the pear function lets you control parameters of the sound events
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~")))

(sx 'boom #t
  (pear :p 20 (rev 0.3) ;; <-- you can set probabilities for the modification to be applied.
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~")))

;; Everything after the ':p' keyword will be applied with a probability of 20%
;; The 'p' keyword in Mégra denotes a probability, which ranges from 0 to 100. 

(sx 'boom #t
  (pear :p 20 (rev 0.3) :for 'sn :p 40 (del 0.5) ;; <-- you can also specify selectors. 
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~")))

;; Everything after the ':for' keyword will only be applied to events that contain the specified tag.

(clear)

;; TECH BACKGROUND
;; The parameters you see in "pear" represent a kind of "incomplete" sound event that 
;; doesn't contain enough information to actually be interpreted as sound.
;; For example, you could create a cycle like this:

(sx 'ba #t ;; <-- this one only generates level events
  (cyc 'fa "lvl:0.1 lvl:0.3 lvl:0.6 lvl:0.4"))

;; as the receiver doesn't really know what to do with it, it interprets it as a sine.

;; This allows you to combine a sound generator with one or many "abstract" event sequence generator
;; in a serialist manner:

(sx 'ba #t
  (cmp ;; <-- the compose function composes the subsequent generators 
    (cyc 'lvls "lvl:0.1 lvl:0.2 lvl:0.2 lvl:0.1 lvl:0.3 lvl:0.05") ;; <-- this loop controls the the levels
    (cyc 'pitches "freq:1000 freq:500 freq:2000") ;; <-- this one the pitches
    (cyc 'sound "risset ~ saw risset sqr"))) ;; <-- this one the type of sound

;; Apart from that, parameter events are not static:
(sx 'boom #t
  (pear (lvl (bounce 0.0 0.5)) ;; <-- bounce is a kind of semi-recified sine wave ...  
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~")))

;; the 'bounce' parameter fades in and out ...

;; Find a list of dynamic parameters in the reference documentation !

;;---------------------;;
;; every - step-based  ;;
;;---------------------;;

;; The 'every' function applies a modifier every ':n' steps.

(sx 'boom #t
  (every :n 10 (rev 0.4)  ;; <-- everything after the ':n' keyword is applied every n steps
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~ ")))

(sx 'boom #t
  (every :n 10 (rev 0.4) (del 0.5) ;; <-- you can specify multiple parameters to be changed
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~ ")))

(sx 'boom #t
  (every :n 12 (rev 0.4) :n 10 (del 0.3) ;; <-- you can also specify multiple n
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~ ")))

(sx 'boom #t
  (every :n 5 (rev 0.6) :for 'sn 'hats :n 7 (del 0.6) ;; <-- same as with pear, you can specify selectors
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~ ")))

(clear)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; V - Applying Modifiers to Generators ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; One of Mégra's interesting features is that you can modify the generators themselves,
;; or their execution speed and order, again, both over discrete time (steps) and probabilistically.

;;----------------------------;;
;; apple - probability-based  ;;
;;----------------------------;;

(sx 'ba #t 
  (apple :p 20 (haste 2 0.5) ;; <-- with a probability of 20%, speed up for 2 steps, cut the duration in half
    (cyc 'go "sqr:120 sqr:180 ~ sqr:80")))

;; This only modifies the execution speed. You can also modify execution order:

;; In this example, we skip ahead 2 steps with a chance of 9%, or rewind 2 steps with a chance of 10%
(sx 'ba #t 
  (apple :p 10 (rewind 2) :p 9 (skip 2) 
    (cyc 'go "sqr:120 sqr:180 ~ sqr:80")))

;; Finally, you can modify the generator itself by adding new information based on its history:
(sx 'ba #t
  (apple :p 10 (grow 0.5 :method 'flower) 
    (cyc 'ta "sqr:'c2 sqr:'a3 sqr:'e3 sqr:'f4"))) ;; <-- you can use note names !

;; The 'grow' function takes a sound event from the generator, adds a certain amount of variation
;; (the first argument, wheren 0.0 means no variation and 1.0 means a lot of variation).

;; Let it run for a while and then check what it looks like:
(export-dot "grown" :live 'ba 'ta)

(clear)

;;---------------------;;
;; every - step-based  ;;
;;---------------------;;

;; The step-based version actually fills both roles:

(sx 'ba #t 
  (every :n 12 (haste 2 0.5) ;; <-- every 12 steps, speed up for 2 steps, cut the duration in half
    (cyc 'go "sqr:120 sqr:180 ~ sqr:80")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VI - Multiplying Generators ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The idea behind multiplyers is to provide a shorthand for layers.

;; Imagine the following ... you want to create a slightly modified version
;; of the same cycle and spred them over the stereo spectrum. (If you already know 
;; TidalCycles, jux rev comes to mind here)

(sx 'ba #t 
  (pear (rate-mul 0.8) (pos -1) 
    (every :n 32 (haste 2 0.5) 
      (cyc 'fa "bd hats sn hats")))
  (pear (pos 1) (cyc 'fa2 "bd hats sn hats")))

;; The 'xspread' multiplyer provides a convenient shorthand for that!
;; here you only need to type the original generator and the modifiers 
;; you want to apply:

(sx 'ba #t
  (xspread
    (pear (rate-mul 0.8) (every :n 32 (haste 2 0.5)))
    (cyc 'fa "bd hats sn hats")))

;; Every modifier (or chain of modifiers) adds another layer:

(sx 'ba #t
  (xspread
    (pear (rate-mul 1.5) (sus 50) :p 30 (rev 0.3) (apple :p 10 (rewind 3)))
    (pear (rate-mul 0.8) (every :n 32 (haste 4 0.5)))
    (cyc 'fa "bd hats sn hats")))

;; If you don't want to spread them over the stereo spectrum, 
;; the 'xdup' multiplyer skips that:

(sx 'ba #t
  (xdup
    (pear (rate-mul 1.5) (sus 50) :p 30 (rev 0.3) (apple :p 10 (rewind 3)))
    (pear (rate-mul 0.8) (every :n 32 (haste 4 0.5)))
    (cyc 'fa "bd hats sn hats")))

;; You can apply modifiers to the multiplied result:
(sx 'ba #t
  (pear (lvl 0.4) ;; <-- modify level of multiplied generators
    (xspread
      (pear (rate-mul 0.8) (every :n 32 (haste 2 0.5)))
      (cyc 'fa "bd hats sn hats"))))

;; In fact, the 'ls' function puts the subsequent generators in a list so you can 
;; modify them as a whole:

(sx 'context #t ;; <-- set this to #f to mute this context !
  (pear 
    :for 'sn :p 20 (rev 0.3) 
    :for 'percussion-generator :p 30 (del 0.5)
    (ls ;; <-- collect generators in list
      (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
      (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
      (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~")))) 

(clear)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VII - WORKING WITH PARTS & CONTROL EVENTS ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The things we've covered so far help you in a live situation, but Mégra also 
;; has some features that help in writing scores.

;; First of all, you can define parts:

(defpart 'part-a
  (cyc 'da "risset:'a6 ~ ~ risset:'c5")
  (cyc 'ba "bd ~ sn ~"))

(defpart 'part-b
  (cyc 'da "saw:'a2 ~ saw:'e2 ~")
  (cyc 'ba "bd ~ sn ~"))

(defpart 'part-c
  (xspread
    (pear (freq-mul 1.5) (apple :p 5 (haste 2 0.5)))
    (cyc 'da "saw:'a4 ~ saw:'e4 saw:'f5")))

;; You can play them with a regular context: 

(sx 'ba #t
  'part-b) ;; switch between parts by changing the part name

(sx 'ba #t
  'part-b ;; combine multiple parts
  'part-c) 

(clear) ;; <-- clear also clears the parts, so you have to add them again !

;; You can use control events to create scores. Control events can call
;; any Mégra function from a generator:
(sx 'conductor #t
  (infer 'score
    :events 
    'a (ctrl (sx 'ba #t 'part-a)) ;; <-- instead of starting the contexts by hand, use a control event here !
    'b (ctrl (sx 'ba #t 'part-a 'part-c))
    'c (ctrl (sx 'ba #t 'part-b 'part-c))
    :rules
    (rule 'a 'b 50 6400)
    (rule 'a 'c 50 6400)
    (rule 'c 'a 100 6400)
    (rule 'b 'c 100 6400)
    ))

;; While the conductor is running, you can also modify the parts.
;; You'll hear the result when the conductor arrives at that part
;; the next time.

;;;;;;;;;
;; FIN ;;
;;;;;;;;;

;; Now you should have an overview over Mégra's features.

;; From here on, you can play with the examples until they seem musically meaningful, 
;; dig your way through the reference documentation,
;; or read further tutorial files, once they are available ! 

;; I hope you had some fun :)




