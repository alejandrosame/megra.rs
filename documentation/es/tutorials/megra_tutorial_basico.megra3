;; ======== ;;
;; Tutorial ;;
;; ======== ;;

;; ¡Bienvenido al tutorial de Mégra! Dado que lo llegaste aquí, supongo que todo
;; está funcionando. ¡Así que comencemos!

;; Este tutorial tiene como objetivo presentar una descripción general de las cosas que se puede
;; hacer con Mégra, sin profundizando demasiado en cada función. Una vez que se sienta cómodo con el contenido
;; de este tutorial, recomiendo consultar la documentación de referencia.

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; I - Primeros Sonidos ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Veamos si puedes escuchar un sonido. Asegúrese de que el volumen esté en un nivel cómodo.
;; Seleccione la siguiente expresión (coloque el cursor en algún lugar entre el paréntesis exterior)
;; y pincha "Ctrl + Return" para ejecutarlo.

(once (saw 440)) ;; <-- evento de un solo disparo, aquí un evento de sonido 'sawtooth' 

;; Si escuchas algo, ¡genial! Si no es así, regrese al archivo Léame :) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; II - Sincronización y Contextos ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Ahora necesitamos poner las cosas en contexto. Todo en Mégra transcurre dentro de un contexto donde
;; se sincronizan diferentes secuencias (o generadores de secuencias). Por eso es un "Sync-conteXt",
;; o "sx" para abreviar. Un contexto de sincronización necesita un nombre y una 'flag' que le indique
;; si esta corriendo o no. Todo lo que sigue son generadores de secuencias. "Sincronización" aquí se
;; refiere a que los generadores se pongan en marcha al mismo tiempo. Si corren a diferentes velocidades
;; (más sobre eso más adelante), no permanecerán sincronizados.

(sx 'context #t ;; <-- los nombres en Mégra comienzan con un '... el flag (booleana) es #t (verdadero, true) o #f (falso)
  (cyc 'cycle-generator "bd ~ hats ~ sn ~ hats ~")) ;; <-- Este es un generador de secuencia. También necesita un identificador.

(clear) ;; <-- el comando 'clear' detiene todo 

;; Puede poner varios generadores de secuencia en el mismo contexto, para que todos se ejecuten sincronizados:
;; Por defecto, los nuevos generadores (que no estaban presentes en el contexto antes) se sincronizan
;; en un evento no silencioso.

(sx 'context #t ;; <-- set this to #f to mute this context !
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~")) 

;; También se puede sincronizar varios contextos:

(sx 'context-a #t ;; <-- Ejecutar esto primero
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~"))

(sx 'context-b #t :sync 'context-a ;; <-- ejecutar esto cuando lo considere oportuno
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~"))

(clear)

;; Hay más cosas interesantes que puedes hacer solo con el contexto de sincronización, como
;; solos y bloqueos:

(sx 'context #t :solo 'beat-generator ;; <-- Puede solo generadores individuales ...
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~"))

(sx 'context #t :block 'beat-generator ;; <-- ... o bloquearlos!
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~"))

(sx 'context #t :block 'sn ;; <-- También se puede bloquear o solo un tipo de evento especial.
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~"))

(sx 'context #t :solo 'sn 'risset ;; <-- También puede bloquear o solo varias 'tags'.
  (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
  (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
  (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~"))

(clear)

;; INFORMACIÓN TÉCNICA
;; También se puede pensar en el contexto de sincronización como un sumidero de eventos de sonido. Cada evento sonoro
;; que emite el generador tiene un montón de etiquetas (tags), que contienen el nombre del
;; generador, el tipo de evento y, en el caso de eventos de samples, las etiquetas de búsqueda
;; (más sobre esto más adelante).
;; Las palabras clave block y solo activan filtros que actúan sobre estas etiquetas.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; III - Generadores de Secuencias ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Si el contexto de sincronización es un receptor de eventos, entonces necesitamos una fuente.
;; Eso es lo que los generadores de secuencias son para.
;; Ya hemos visto un tipo de generador, el generador de ciclo ('cyc'). Hay varios más.

;; INFORMACIÓN TÉCNICA:
;; ¡Cada generador de secuencias crea una cadena de Markov!
;; Eso significa que los generadores de secuencia
;; no son necesariamente deterministas.

;; TIP:
;; Se puede visualizar las cadenas de Markov, ya que se pueden representar fácilmente como un grafo.
;; ¡Para ese fin, se necesita graphviz (https://graphviz.org/) instalado! (más tarde a medida que avanzamos)

;; Veamos ahora algunos generadores. Como ya se mencionó, cada generador necesita un identificador.
;; Esto es para que podamos dirigirnos a ellos para visualización y mantener su estado sobre el
;; varias ejecuciones.

;; ---------------------;;
;; El Generador NUCLEUS ;;
;; ---------------------;;

;; .. o 'nuc', para abreviar ...

(sx 'ctx #t ;; <-- un pitido continuo
  (nuc 'core :dur 400 ;; <-- este argumento de palabra clave controla el intervalo de tiempo. ¡Se puede utilizar con todos los generadores de secuencias!
    (sine 440)
    ;;(sine 885) ;; <-- Puedes pasar uno o varios eventos, descomenta para probar!
    ))

(clear)

;; Este es el generador más simple, simplemente repite los eventos que se le dan una y otra vez en
;; un intervalo de tiempo constante. Cada generador tiene varios argumentos de palabras clave, como se puede ver
;; arriba.

;;---------------------;;
;; El Generador CYCLE  ;;
;;---------------------;;

;; Ya hemos visto esto anteriormente en la introducción de contextos. El generador de ciclos crea,
;; lo has adivinado, ciclos, aunque hay más, como veremos.

;; Aquí hay un ciclo básico:
(sx 'trololo #t ;; <-- no hay necesidad de nombrar cada contexto 'contexto' ... no usa 'contraseña' para todas sus contraseñas, ¿verdad?
  (cyc 'bells "risset:'a4 ~ risset:'a6 ~ risset:'a4 ~ risset:'c5 risset:'e5"))

;; Si desea que el generador sea más rápido, puede modificar el intervalo de tiempo:
(sx 'trololo # ;; mucho más rapido !
  (cyc 'bells :dur 100 "risset:'a4 ~ risset:'a6 ~ risset:'a4 ~ risset:'c5 risset:'e5"))

(sx 'trololo # ;; mucho más lento !
  (cyc 'bells :dur 400 "risset:'a4 ~ risset:'a6 ~ risset:'a4 ~ risset:'c5 risset:'e5")) 

;; La función 'cyc' toma un String como argumento que describe un ciclo. Si ya conoce TidalCycles,
;; el concepto se toma prestado de eso. Es un pequeño lenguaje de secuenciación propio.

;; Hasta ahora todo ha sido muy determinista, entonces, ¿de qué se trata toda la charla estocástica en el archivo Léame?
;; Bueno, mira esto:

(sx 'trololo #t 
  (cyc 'bells :rep 70 :max-rep 4 "risset:'a4 ~ risset:'a6 ~ risset:'a4 ~ risset:'c5 risset:'e5")) 

;; No suena tan predecible, ¿verdad? Entonces, ¿qué hacen los argumentos de palabras clave? La palabra clave 'rep' define
;; la posibilidad de que un evento se repita (70% de probabilidad en este caso). La palabra clave 'max-rep' especifica el
;; número máximo de repeticiones.

;; Por el bien de la visualización, reduzcamos el número de repeticiones:

(sx 'trololo #t 
  (cyc 'bells :rep 70 :max-rep 2 "risset:'a4 ~ risset:'a6 ~ risset:'a4 ~ risset:'c5 risset:'e5")) 

;; Ahora, veamos cómo se ve esta cadena de Markov como un grafo:

(export-dot "trololo" :live 'trololo 'bells)
  
;; Ahora encontrará un archivo llamado "trololo_trololo_bells.dot" en la carpeta desde la que inició Mégra.
;; Ejecute 'neato -Tsvg trololo_trololo_bells.dot -o trololo_trololo_bells.svg' para renderizar un archivo SVG que
;; se puede ver en un navegador. Debería ver la cadena de Markov representada como un grafo, donde puede ver todos
;; las repeticiones, etc. ¡Pruebe diferentes configuraciones y vea cómo se ven!

;; Debido a su capacidad para crear secuencias repetitivas, el generador de ciclos es perfecto para crear
;; ritmos etcétera.

;; Para ver una descripción completa, consulte la entrada en la referencia de función.

;;---------------------;;
;; El Generador INFER  ;; 
;;---------------------;;

;; El generador de ciclos es bueno para crear secuencias más o menos repetitivas a partir de descripciones abstractas (el lenguaje cyc),
;; Pero, ¿si quieres algo más controlado? Si desea crear generadores a partir de un conjunto de reglas, el generador 'infer'
;; los tomará e inferirá un generador a partir de ellos. Ésta también es una buena oportunidad para explicar lo que están haciendo
;; las cadenas Markov (o Probabilistic Finite Automata, PFA para abreviar).

;; Si te gusta la música generativa, probablemente ya sepas qué es una cadena de Markov, ya que es una estructura bastante común
;; en ese dominio. Si no, aquí tienes una explicación simple. Incluso si ya los conoce, le recomiendo leer lo siguiente
;; parte para conocer el "sabor" específico de las cadenas de Markov empleadas por Mégra.

;; Imagina que quieres crear un ritmo simple de estilo boom-bap, con solo un bombo, una caja y algunos charles. Solo la mitad de
;; tiempo, el charles debe estar entre el bombo y la caja.

;; En términos un poco más precisos, podríamos describir el ritmo con las siguientes reglas. La descripción del lenguaje natural
;; es un poco tedioso, pero tengan paciencia conmigo. ¡Seguirán descripciones más concisas!

;; 1.) Empiece con un bombo.
;; 2.) Existe un 50% de probabilidad de que una caja siga al bombo, después de 400 milisegundos.
;; 3.) Existe un 50% de probabilidad de que un charles siga al bombo, después de 200 milisegundos.
;; 4.) Después de cada caja seguirá un bombo, después de 400 milisegundos.
;; 5.) Después de cada charles seguirá una caja, después de 200 milisegundos.

(sx 'boom #t 
  (infer 'bap ;; <-- esto crea el generador (lo infiere de las reglas) 
    :events 'b (bd) 's (sn) 'h (hats) ;; <- aquí está el mapeo de eventos ... bastante prosaico ...
    :rules 
    (rule 'b 's 50 400) ;; aquí están las reglas ... formato: (rule fuente 'duración de probabilidad objetivo)
    (rule 'b 'h 50 200) 
    (rule 's 'b 100 400) 
    (rule 'h 's 100 200)))

;; Visualízalo:

(export-dot "beat" :live 'boom 'bap)
;; neato -Tsvg beat_bap_boom.dot -o beat_bap_boom.svg

(clear)

;; También se puede introducir repeticiones:
(sx 'boom #t 
  (infer 'bap
    :events 'b (bd) 's (sn) 'h (hats) 
    :rules 
    (rule 'b 's 50 400) 
    (rule 'b 'h 50 200) 
    (rule 's 'b 100 400) 
    (rule 'h 's 10 200)
    (rule 'h 'h 90 50) ;; repite el hihat con un 90% de probabilidad y muy rápido
    (rule 'hhhh 'b 100 200) ;; número máximo de repeticiones: 4
    ))

;; Visualízalo otra vez:
(export-dot "beat" :live 'boom 'bap)
;; neato -Tsvg beat_bap_boom.dot -o beat_bap_boom.svg

;; INFORMACIÓN TECNICA:
;; Aquí se puede ver la parte de "orden variable" de las cadenas de Markov de orden variable. Puede especificar el
;; longitud de memoria requerida cuando sea necesario, es decir, para definir la longitud de las repeticiones.

;; Un poco como 'trap' irregular, ¿no?

;;---------------------;;
;; El Generador LEARN  ;;
;;---------------------;;

;; Las cadenas de Markov no solo se pueden inferir de las reglas, sino que también se aprenden de una muestra. Aquí es donde
;; entra un poco de aprendizaje automático a la antigua.

;; Entonces, si en lugar de una secuencia exacta necesita "algo como" la muestra, puede aprender el patrón
;; de la muestra. Las duraciones son fijas para este método.

(sx 'boom #t 
  (learn 'bap ;; <-- esto crea el generador (aprende de una muestra)
    :events 'b (bd) 's (sn) 'h (hats) 'r (risset 'c5)
    :sample "bsbs~~~bsbsb~~hbhb~rbrb~~" ;; <-- hack en alguna cadena de muestra .. '~' significa silencio
    ))

(clear)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IV - Modificar el Flujo de Eventos ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Cada generador emite una corriente de eventos sonoros que fluyen hacia el sumidero (sx).
;; Los eventos se pueden manipular a lo largo del camino,
;; ya sea de forma probabilística o basada en pasos.

;;------------------------;;
;; pear - probabilística  ;;
;;------------------------;;

;; La función 'pear' le permite controlar los parámetros de eventos de sonido de forma probabilística.

(sx 'boom #t 
  (pear (lvl 0.4) (rev 0.2) ;; <-- la función de pera le permite controlar los parámetros de los eventos de sonido
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~")))

(sx 'boom #t
  (pear :p 20 (rev 0.3) ;; <-- se puede establecer probabilidades para que se aplique la modificación.
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~")))

;; Todo lo que esté después de la palabra clave ':p' se aplicará con una probabilidad del 20%
;; La palabra clave 'p' en Mégra denota una probabilidad, que va de 0 a 100.

(sx 'boom #t
  (pear :p 20 (rev 0.3) :for 'sn :p 40 (del 0.5) ;; <--	También se puede especificar selectores.
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~")))

;; Todo lo que esté después de la palabra clave ':for' solo se aplicará a los eventos que contengan
;; la etiqueta especificada.

(clear)

;; INFORMACIÓN TECNICA:
;; Los parámetros que ves en "pear" representan una especie de evento de sonido "incompleto" que
;; no contiene suficiente información para ser interpretado como sonido.
;; Por ejemplo, podría crear un ciclo como este:

(sx 'ba #t 
  (cyc 'fa "lvl:0.1 lvl:0.3 lvl:0.6 lvl:0.4")) ;; <-- este solo genera eventos de nivel de sonido

;; Como el receptor no sabe realmente qué hacer con él, lo interpreta como un seno.

;; Esto le permite combinar un generador de sonido con uno o varios generadores de secuencia de eventos "abstractos"
;; de manera serialista:

(sx 'ba #t
  (cmp ;; <-- la función de composición compone los generadores posteriores
    (cyc 'lvls "lvl:0.1 lvl:0.2 lvl:0.2 lvl:0.1 lvl:0.3 lvl:0.05") ;; <-- este ciclo controla los niveles
    (cyc 'pitches "freq:1000 freq:500 freq:2000") ;; <-- este los freciencias
    (cyc 'sound "risset ~ saw risset sqr"))) ;; <-- este es el tipo de sonido

;; Aparte de eso, los eventos de parámetros no son estáticos:
(sx 'boom #t
  (pear (lvl (bounce 0.0 0.5)) ;; <-- El 'bounce' es una especie de onda sinusoidal semi-rectificada ...
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~")))

;; El parámetro 'obounce' hace aparecer y desaparecer gradualmente el sonido ...

;; Encuentre una lista de parámetros dinámicos en la documentación de referencia.

;;---------------------;;
;; every - step-based  ;;
;;---------------------;;

;; La función 'every' aplica un modificador cada ':n' pasos.

(sx 'boom #t
  (every :n 10 (rev 0.4)  ;; <-- todo después de la palabra clave ':n' se aplica cada n pasos
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~ ")))

(sx 'boom #t
  (every :n 10 (rev 0.4) (del 0.5) ;; <-- puede especificar varios parámetros para cambiar
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~ ")))

(sx 'boom #t
  (every :n 12 (rev 0.4) :n 10 (del 0.3) ;; <-- también puede especificar múltiples 'n'
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~ ")))

(sx 'boom #t
  (every :n 5 (rev 0.6) :for 'sn 'hats :n 7 (del 0.6) ;; <- igual que con 'pear', puede especificar selectores
    (cyc 'bap "bd ~ hats ~ sn ~ hats ~ ")))

(clear)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; V - Applying Modifiers to Generators ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Una de las características interesantes de Mégra es que puede modificar los propios generadores,
;; o su velocidad y orden de ejecución, otra vez, tanto en tiempo discreto (pasos) como probabilísticamente.

;;----------------------------;;
;; apple - probability-based  ;;
;;----------------------------;;

(sx 'ba #t 
  (apple :p 20 (haste 2 0.5) ;; <-- con una probabilidad del 20%, acelerar 2 pasos, reducir la duración a la mitad
    (cyc 'go "sqr:120 sqr:180 ~ sqr:80")))

;; Esto solo modifica la velocidad de ejecución. También puede modificar el orden de ejecución:

;; En este ejemplo, saltamos 2 pasos adelante (skip) con una probabilidad del 9%
;; o retrocedemos 2 pasos (rewind) con una probabilidad del 10%.
(sx 'ba #t 
  (apple :p 10 (rewind 2) :p 9 (skip 2) 
    (cyc 'go "sqr:120 sqr:180 ~ sqr:80")))

;; Finalmente, se puede modificar el generador agregando nueva información basada en su historial:
(sx 'ba #t
  (apple :p 10 (grow 0.5 :method 'flower) 
    (cyc 'ta "sqr:'c2 sqr:'a3 sqr:'e3 sqr:'f4"))) ;; <-- ¡puedes usar nombres de notas!

;; La función 'grow' toma un evento de sonido del generador, agrega una cierta cantidad de variación
;; (el primer argumento, donde 0.0 significa que no hay variación y 1.0 significa mucha variación).

;; Déjelo correr por un tiempo y luego verifique cómo se ve:
(export-dot "grown" :live 'ba 'ta)

(clear)

;;----------------;;
;; every - pasos  ;;
;;-----------------;;

;; La versión basada en pasos en realidad cumple ambos roles:

(sx 'ba #t 
  (every :n 12 (haste 2 0.5) ;; <-- cada 12 pasos, acelera 2 pasos, reduce la duración a la mitad
    (cyc 'go "sqr:120 sqr:180 ~ sqr:80")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VI - Multiplicar Generadores ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; La idea detrás de los multiplicadores es proporcionar una abreviatura de capas.

;; Imagina lo siguiente ... quieres crear una versión ligeramente modificada
;; del mismo ciclo y los esparció sobre el espectro estéreo. (Si ya sabes
;; TidalCycles, jux rev me viene a la mente aquí)

(sx 'ba #t 
  (pear (rate-mul 0.8) (pos -1) 
    (every :n 32 (haste 2 0.5) 
      (cyc 'fa "bd hats sn hats")))
  (pear (pos 1) (cyc 'fa2 "bd hats sn hats")))
  
;; ¡El multiplicador de 'extensión' proporciona una abreviatura conveniente para eso!
;; aquí solo necesitas escribir el generador original y los modificadores que
;; quieres aplicar:

(sx 'ba #t
  (xspread
    (pear (rate-mul 0.8) (every :n 32 (haste 2 0.5)))
    (cyc 'fa "bd hats sn hats")))

;; Cada modificador (o cadena de modificadores) agrega otra capa:

(sx 'ba #t
  (xspread
    (pear (rate-mul 1.5) (sus 50) :p 30 (rev 0.3) (apple :p 10 (rewind 3)))
    (pear (rate-mul 0.8) (every :n 32 (haste 4 0.5)))
    (cyc 'fa "bd hats sn hats")))

;; Si no desea distribuirlos por el espectro estéreo,
;; el multiplicador 'xp' omite eso:

(sx 'ba #t
  (xdup
    (pear (rate-mul 1.5) (sus 50) :p 30 (rev 0.3) (apple :p 10 (rewind 3)))
    (pear (rate-mul 0.8) (every :n 32 (haste 4 0.5)))
    (cyc 'fa "bd hats sn hats")))

;; Se puede aplicar modificadores al resultado multiplicado:

(sx 'ba #t
  (pear (lvl 0.4) ;; <-- así se modifica el nivel de los generadores multiplicados
    (xspread
      (pear (rate-mul 0.8) (every :n 32 (haste 2 0.5)))
      (cyc 'fa "bd hats sn hats"))))

;; De hecho, la función 'ls' pone los generadores subsiguientes en una lista para que pueda
;; modificarlos en su conjunto:

(sx 'context #t 
  (pear 
    :for 'sn :p 20 (rev 0.3) 
    :for 'percussion-generator :p 30 (del 0.5)
    (ls ;; <-- recoger generadores en la lista
      (cyc 'percussion-generator "~ ~ ~ risset:'a5 ~ ~ risset:'c6 ~")
      (cyc 'bassline-generator "saw:'a1 ~ saw:'ds2 saw:'e2 ~ ~ saw:'c3 ~")
      (cyc 'beat-generator "bd ~ hats ~ sn ~ hats ~")))) 

(clear)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; VII - TRABAJAR CON PIEZAS Y EVENTOS DE CONTROL ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Las cosas que hemos cubierto hasta ahora le ayudan en una situación en vivo, pero Mégra también
;; tiene algunas características que ayudan a escribir partituras.

;; En primer lugar, se puede definir partes:

(defpart 'part-a
  (cyc 'da "risset:'a6 ~ ~ risset:'c5")
  (cyc 'ba "bd ~ sn ~"))

(defpart 'part-b
  (cyc 'da "saw:'a2 ~ saw:'e2 ~")
  (cyc 'ba "bd ~ sn ~"))

(defpart 'part-c
  (xspread
    (pear (freq-mul 1.5) (apple :p 5 (haste 2 0.5)))
    (cyc 'da "saw:'a4 ~ saw:'e4 saw:'f5")))

;; Puedes tocarlos con un contexto regular:

(sx 'ba #t
  'part-b) ;; cambiar entre partes cambiando el nombre de la parte 

(sx 'ba #t
  'part-b ;; combinar varias partes ...
  'part-c) 

(clear) ;; <-- clear también borra las partes, ¡así que tienes que agregarlas de nuevo!

;; Se puede utilizar eventos de control para crear partituras. Los eventos de control pueden llamar
;; cualquier función Mégra de un generador:

(sx 'conductor #t
  (infer 'partitura
    :events 
    'a (ctrl (sx 'ba #t 'part-a)) ;; <-- En lugar de iniciar los contextos a mano, utilice un evento de control aquí.
    'b (ctrl (sx 'ba #t 'part-a 'part-c))
    'c (ctrl (sx 'ba #t 'part-b 'part-c))
    :rules
    (rule 'a 'b 50 6400)
    (rule 'a 'c 50 6400)
    (rule 'c 'a 100 6400)
    (rule 'b 'c 100 6400)
    ))

;; Mientras el conductor está corriendo, también se puede modificar las partes.
;; Escucharás el resultado cuando el conductor llegue a esa parte la próxima vez.

;;;;;;;;;
;; FIN ;;
;;;;;;;;;

;; Ahora debería tener una visión general de las funciones de Mégra.

;; A partir de aquí, se puede jugar con los ejemplos hasta que parezcan
;; musicalmente significativos, cavar a través de la documentación de referencia,
;; o lea más archivos de tutoriales, una vez que estén disponibles.

;; Espero que te hayas divertido :)




